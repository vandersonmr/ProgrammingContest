#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <vector>
#include <algorithm>

using namespace std;

#define MAX 1100

class UnionFind {
  public:
    int id[MAX], sz[MAX];
    UnionFind(int n) {
      for (int i = 0; i < n; ++i) {
        id[i] = i;
        sz[i] = 1;
      }
    }

    int root(int i) {
      while(i != id[i]) {
        id[i] = id[id[i]];    //path Compression
        i = id[i];
      }
      return i;
    }

    int find(int p, int q) {
      return root(p)==root(q);
    }

    void unite(int p, int q) {
      int i = root(p);
      int j = root(q);
      if(sz[i] < sz[j]) {
        id[i] = j;
        sz[j] += sz[i];
      }
      else {
        id[j] = i;
        sz[i] += sz[j];
      }
    }
};

float
dist3D_Segment_to_Segment( Segment S1, Segment S2)
{
    Vector   u = S1.P1 - S1.P0;
    Vector   v = S2.P1 - S2.P0;
    Vector   w = S1.P0 - S2.P0;
    float    a = dot(u,u);         // always >= 0
    float    b = dot(u,v);
    float    c = dot(v,v);         // always >= 0
    float    d = dot(u,w);
    float    e = dot(v,w);
    float    D = a*c - b*b;        // always >= 0
    float    sc, sN, sD = D;       // sc = sN / sD, default sD = D >= 0
    float    tc, tN, tD = D;       // tc = tN / tD, default tD = D >= 0

    // compute the line parameters of the two closest points
    if (D < SMALL_NUM) { // the lines are almost parallel
        sN = 0.0;         // force using point P0 on segment S1
        sD = 1.0;         // to prevent possible division by 0.0 later
        tN = e;
        tD = c;
    }
    else {                 // get the closest points on the infinite lines
        sN = (b*e - c*d);
        tN = (a*e - b*d);
        if (sN < 0.0) {        // sc < 0 => the s=0 edge is visible
            sN = 0.0;
            tN = e;
            tD = c;
        }
        else if (sN > sD) {  // sc > 1  => the s=1 edge is visible
            sN = sD;
            tN = e + b;
            tD = c;
        }
    }

    if (tN < 0.0) {            // tc < 0 => the t=0 edge is visible
        tN = 0.0;
        // recompute sc for this edge
        if (-d < 0.0)
            sN = 0.0;
        else if (-d > a)
            sN = sD;
        else {
            sN = -d;
            sD = a;
        }
    }
    else if (tN > tD) {      // tc > 1  => the t=1 edge is visible
        tN = tD;
        // recompute sc for this edge
        if ((-d + b) < 0.0)
            sN = 0;
        else if ((-d + b) > a)
            sN = sD;
        else {
            sN = (-d +  b);
            sD = a;
        }
    }
    // finally do the division to get sc and tc
    sc = (abs(sN) < SMALL_NUM ? 0.0 : sN / sD);
    tc = (abs(tN) < SMALL_NUM ? 0.0 : tN / tD);

    // get the difference of the two closest points
    Vector   dP = w + (sc * u) - (tc * v);  // =  S1(sc) - S2(tc)

    return norm(dP);   // return the closest distance
}

typedef struct Line {
  int xa, xb, ya, yb;
} Line;

bool shorter(const pair<Line, Line> L1, const pair<Line, Line> L2) {
  double A = FindDistanceToSegment(L1.first.xa, L1.first.ya, L1.first.xb, L1.first.yb, L1.second.xa, L1.second.ya, L1.second.xb, L1.second.yb);
  double B = FindDistanceToSegment(L2.first.xa, L2.first.ya, L2.first.xb, L2.first.yb, L2.second.xa, L2.second.ya, L2.second.xb, L2.second.yb);
  return A < B;
}

int main () {
  int n;
  scanf("%d\n", &n);
  std::vector<Line> Graph;
  std::vector<std::pair<Line, Line> > Adj;

  for (int i = 0; i < n; i++) {
    Line L;
    scanf("%d %d %d %d\n", &L.xa, &L.ya, &L.xb, &L.yb); 
    Graph.push_back(L);
  }
  for (int i = 0; i < n; i++) {
    for (int j = i; j < n; j++) {
      Adj.push_back(pair<Line, Line>(Graph[i], Graph[j]));
    }
  }
  std::sort(Adj.begin(), Adj.end(), shorter); 
  UnionFind U(n);

  return 0; 
}
